#!/usr/bin/env bash
set -euo pipefail

log_mask() {
  # usage: log_mask NAME VALUE
  local name="$1" val="$2" len=${#2}
  if [ "$len" -gt 8 ]; then
    printf '[licenses] %s: %s‚Ä¶%s (len=%d)\n' "$name" "${val:0:4}" "${val: -4}" "$len"
  else
    printf '[licenses] %s: (len=%d)\n' "$name" "$len"
  fi
}

write_b64() {
  # usage: write_b64 ENV_VAR TARGET_PATH MODE
  local env_var="$1" target="$2" mode="$3"
  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  local val="${!env_var:-}"

  if [ -z "$val" ]; then
    echo "[licenses] \$$env_var is empty, skipping $target"
    return 0
  fi

  mkdir -p "$(dirname "$target")"

  # –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å–∫—É/–¥–ª–∏–Ω—É
  log_mask "$env_var" "$val"

  # –î–µ–∫–æ–¥ —Å –∏–≥–Ω–æ—Ä–æ–º –º—É—Å–æ—Ä–∞; –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ base64 –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
  if ! printf '%s' "$val" | base64 -di > "$target" 2>/dev/null; then
    echo "[licenses] invalid base64 in \$$env_var ‚Üí skipping $target"
    rm -f "$target" || true
    return 0
  fi

  chmod "$mode" "$target"
  echo "[licenses] wrote $target"
}

# ---------- Licenses drop-in ----------
write_b64 "LICENSE_B64"         "/workspaces/tinkoff_futures/backend/assets/license.dll"       600
write_b64 "LICENSE_PUBLIC_B64"  "/workspaces/tinkoff_futures/backend/assets/license_public.pem" 600
write_b64 "SIGNATURE_B64"       "/workspaces/tinkoff_futures/backend/assets/signature.bin"     600


wait_backend_log() {
  local log="/workspaces/tinkoff_futures/backend/backend.log" attempts=${1:-120}
  echo "[backend] waiting for startup message..."
  while [ ! -f "$log" ] || ! grep -q "Application is running" "$log"; do
    sleep 1
    attempts=$((attempts-1))
    if [ "$attempts" -le 0 ]; then
      echo "[backend] backend did not start in time"
      return 1
    fi
  done
  echo "[backend] startup detected"
  return 0
}

# –°—Ç–∞—Ä—Ç—É–µ–º –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã (—Å–∫—Ä–∏–ø—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π)
chmod +x ./start-projects.sh
./start-projects.sh
wait_backend_log || true

# --- make ports public (non-interactive) -----------------
current_codespace() {
  # 1) –ï—Å–ª–∏ Codespaces –¥–∞–ª –∏–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if [ -n "${CODESPACE_NAME:-}" ]; then
    echo "$CODESPACE_NAME"
    return 0
  fi

  # 2) –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ slug —Ä–µ–ø–æ –∏–∑ git remote
  local repo_slug
  repo_slug="$(git -C /workspaces/tinkoff_futures remote get-url origin 2>/dev/null \
    | sed -E 's#(git@github.com:|https?://github.com/)([^/]+/[^/.]+)(\.git)?#\2#')"

  # 3) –í–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π codespace –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–ø–æ
  if command -v gh >/dev/null 2>&1; then
    if [ -n "$repo_slug" ]; then
      gh codespace list --repo "$repo_slug" --json name,state --limit 50 \
        --jq '.[] | select(.state=="Available") | .name' 2>/dev/null | head -n1 && return 0
    fi
    # 4) –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
    gh codespace list --json name,state --limit 50 \
      --jq '.[] | select(.state=="Available") | .name' 2>/dev/null | head -n1 && return 0
  fi

  return 1
}

open_browser_for_port() {
  # usage: open_browser_for_port 4200
  local port="$1"
  local domain="${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:-app.github.dev}"
  local cs="${CODESPACE_NAME:-}"
  # –µ—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ gh/current_codespace (—É –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å)
  if [ -z "$cs" ]; then cs="$(current_codespace || true)"; fi

  if [ -z "$cs" ]; then
    echo "[open] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è codespace ‚Äî –ø–µ—á–∞—Ç–∞—é —Ç–æ–ª—å–∫–æ URL"
    cs="unknown"
  fi

  local url="https://${cs}-${port}.${domain}/"
  echo "[open] –û—Ç–∫—Ä–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: $url"

  # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º command:-—Å—Å—ã–ª–∫—É –¥–ª—è VS Code (–∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–π –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
  # –ù—É–∂–Ω–æ —Å–ª–µ–≥–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ URL –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  local u_enc="${url//:/%3A}"; u_enc="${u_enc//\//%2F}"
  local cmd_uri="command:vscode.open?%5B%22${u_enc}%22%5D"
  echo "[open] (VS Code) üëâ $cmd_uri"
}


make_public() {
  local port="$1" cs="$2"
  echo "[codespaces] set $port public"
  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–æ–º–ø—Ç—ã gh
  GH_PROMPT_DISABLED=1 gh codespace ports visibility "${port}:public" -c "$cs" >/dev/null 2>&1 \
    || echo "[codespaces] –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ—Ä—Ç $port –ø—É–±–ª–∏—á–Ω—ã–º (–Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)"
}

if command -v gh >/dev/null 2>&1; then
  if gh auth status -h github.com >/dev/null 2>&1; then
    cs_name="$(current_codespace || true)"
    if [ -n "${cs_name:-}" ]; then
      make_public 11111 "$cs_name"
      sleep 2
      open_browser_for_port 4200
    else
      echo "[codespaces] –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π codespace. –£–∫–∞–∂–∏ –≤—Ä—É—á–Ω—É—é: gh codespace ports visibility 4200:public -c <name>"
      gh codespace list -L 20 || true
    fi
  else
    echo "[codespaces] gh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑: gh auth login --web"
    echo "[codespaces] –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏: bash .devcontainer/postAttach.sh"
  fi
else
  echo "[codespaces] gh CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ—Å—Ç–∞–≤—å —Ñ–∏—á—É github-cli –≤ devcontainer –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ gh –≤ Dockerfile."
fi
